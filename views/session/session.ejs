<!DOCTYPE html>
<html>
  <head>
    <title>Jitsi Session: <%= jitsiRoomName %></title>
    <script src="https://8x8.vc/libs/external_api.min.js"></script>
    <link rel="stylesheet" href="/css/session/session.css" />
  </head>
  <body>
    <h1>
      Welcome to Your Session, <%= currentUser.name || currentUser.email %>!
    </h1>
    <div id="jitsi-container">
    </div>
    <footer>Powered by Jitsi Meet (for Graduation Project)</footer>

    <script>
      // These variables are passed from the backend controller
      const jitsiRoomName = "<%= jitsiRoomName %>";
      const jitsiDomain = "<%= jitsiDomain %>";
      // Get currentUser from a global variable injected in the HTML
      const currentUser = window.currentUser || {}; // Fallback to empty object if not set

      let api = null;

      document.addEventListener("DOMContentLoaded", () => {
        if (!jitsiRoomName || !jitsiDomain) {
          document.getElementById("jitsi-container").innerHTML =
            '<p class="error-message">Error: Jitsi room details not provided.</p>';
          return;
        }

        const options = {
          roomName: jitsiRoomName,
          width: "100%",
          height: "100%",
          parentNode: document.querySelector("#jitsi-container"),
          userInfo: {
            // Pass user info to Jitsi for display (optional, but good for UX)
            displayName: currentUser.name || currentUser.email,
            email: currentUser.email,
          },
          configOverwrite: {
            // --- RE-ADD THIS LINE ---
            prejoinPageEnabled: false, // This will skip the "How do you want to join" screen
            // --- END RE-ADD ---
            enableUserRolesBasedOnToken: true,
            // Re-add other desired configOverwrite options one by one if needed,
            // or based on your original list, as long as they don't cause new issues.
            startWithVideoMuted: false,
            startWithAudioMuted: false,
            enableWelcomePage: false, // This typically prevents a separate welcome page
            enableNoAudioDetection: true,
            enableNoisyMicDetection: true,
            disableRemoteMute: false,
            defaultLanguage: "en",
          },
          interfaceConfigOverwrite: {
            // Re-add your interfaceConfigOverwrite options here as desired.
            // Start by just adding the APP_NAME if you want:
            APP_NAME: "Teletherapy App (Grad Project)",
            HIDE_INVITE_MORE_BUTTON: true,
            TOOLBAR_BUTTONS: [
              "microphone",
              "camera",
              "desktop",
              "fullscreen",
              "fodeviceselection",
              "hangup",
              "profile",
              "chat",
              "recording",
              "livestreaming",
              "etherpad",
              "sharedvideo",
              "raisehand",
              "settings",
              "tileview",
              "videoquality",
              "filmstrip",
              "feedback",
              "stats",
              "shortcuts",
              "security",
              "mute-everyone",
              "mute-video-everyone",
            ],
          },
        };

        // --- ADD THESE DEBUGGING LINES ---
        console.log("DEBUGGING JITSI DOMAIN AND OPTIONS:");
        console.log("jitsiDomain value:", jitsiDomain);
        console.log("typeof jitsiDomain:", typeof jitsiDomain);
        console.log("jitsiOptions object:", options); // Log the entire options object too
        // --- END DEBUGGING LINES ---

        api = new JitsiMeetExternalAPI(jitsiDomain, options);

        const sessionDuration = 60 * 60 * 1000; // 60 minutes * 60 seconds * 1000 milliseconds = 1 hour

        const sessionTimer = setTimeout(() => {
          if (api) {
            console.log("Session duration expired. Disposing Jitsi API.");
            alert("Your session has ended due to the time limit.");
            api.dispose(); // This will trigger the readyToClose event
            // The readyToClose event listener will then handle the redirection
          }
        }, sessionDuration);

        api.addEventListener("videoConferenceJoined", () => {
          console.log("Video conference joined!");
          document.querySelector(".loading-message").style.display = "none"; // Hide loading message
        });

        api.addEventListener("readyToClose", () => {
          console.log("Conference is ready to close.");
          clearTimeout(sessionTimer); // Clear the timer if the conference closes for another reason
          alert(
            "The conference has ended. You will be redirected to your profile."
          );
          window.location.href = "/api/user/dashboard"; // Redirect user to their profile page
        });

        api.addEventListener("participantLeft", (participant) => {
          console.log("Participant left:", participant);
        });

        api.addEventListener("participantJoined", (participant) => {
          console.log("Participant joined:", participant);
        });
      });

      // Clean up Jitsi API instance when the page is unloaded
      window.addEventListener("beforeunload", () => {
        if (api) {
          api.dispose();
        }
      });
    </script>
  </body>
</html>
